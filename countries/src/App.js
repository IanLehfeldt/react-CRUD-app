import React, { Component } from 'react';
import './App.css';

class App extends Component {

  constructor() {
    super();
    // creating the default values for our application
    // setting countries to an empty array prevents JavaScript from getting upset
    // when we try to map it to list items in the render() function below
    this.state = {
      title: 'Simple title for Country Application',
      countries: []
    }
  }

  // This gets called when the page loads
  // This is essentially the React equivalent of jQuery's on ready
  componentDidMount() {
    const self = this;
    console.log('component has mounted');
    self.getCountries(); // making our first call to the api
  }
  
  // Retrieves all the countries
  getCountries() {
    const self = this;
    const url = 'http://localhost:5000/api/countries';

    // our http request to the api
    // a get request to 'http://localhost:5000/api/countries'
    fetch(url)
      .then(response => response.json()) // parses the JSON response into a usable countries array
      .then(countriesResponseArray => {
        // sets the countries list in our application
        // this triggers another render function to fire off
        self.setState({
          countries: countriesResponseArray
        })
      })
      .catch(error => console.log('Error Fetch : ' + error))
  }

  removeCountry(id) {
    // the id is passed in from the "Remove" button click thanks to
    // onClick={this.removeCountry.bind(this, country.id)}
    const self = this;

    // delete request adds the id as a parameter so the server knows which country to delete 
    const request = new Request('http://localhost:5000/api/remove/' + id, {
      method: 'DELETE'
    });

    // making the request to the server to delete the country
    fetch(request)
      .then(response => {
        // if the delete is successful, run getCountries again to update the list
        self.getCountries();
      })
      .catch(error => console.log('Error Remove Country Fetch : ' + error));

  }

  addCountry(event) {
    const self = this;

    event.preventDefault(); // prevents the page from redirecting, jQuery requires something similar

    // creates the new country object by picking up the values from the inputs
    const country_data = {
      country_name: this.refs.country_name.value,
      continent_name: this.refs.continent_name.value
    };

    // post request requires the url, method, and body, just like jQuery or angular
    // the extra headers and JSON.stringify pieces here are because React doesn't do that
    // parsing for us like jQuery or angular do. There are libraries like Axios to make this
    // part a little bit cleaner
    const request = new Request('http://localhost:5000/api/new-country', {
      method: 'POST',
      headers: new Headers({ 'Content-Type': 'application/json' }),
      body: JSON.stringify(country_data)
    });

    // making the request to the server to post the country
    fetch(request)
      .then(function (response) {
        console.log('post was successful:', response);
        // if the post is successful, run getCountries again to update the list
        self.getCountries();
      })
      .catch(function (err) {
        console.log('Fetch Error addCountry :-S', err);
      })

  }

  // The render function decides what to display on the DOM
  render() {
    const title = this.state.title;
    const countries = this.state.countries;

    return (
      <div className="App">
        {/* This title is set in the constructor and never changed */}
        <h1>{title}</h1>
        <form className="countryForm">
          {/* the "ref" property on these input fields is what allows us to grab them later */}
          <input type="text" ref="country_name" placeholder="country_name"></input>
          <input type="text" ref="continent_name" placeholder="continent_name"></input>
          {/* onClick links us back to the function that we created earlier (like an ng-click) */}
          <button onClick={this.addCountry.bind(this)}>Add Country</button>
        </form>

        {/* This list is generated by looping through the array of countries thanks to the .map
        This should look pretty familiar to ng-repeat
        The key is a unique identifier that React uses to target DOM elements */}
        <ul>
          {countries.map(country => <li key={country.id}> {country.country_name} {country.continent_name}
            <button onClick={this.removeCountry.bind(this, country.id)}>Remove</button> </li>)}
          {/* by including the button in this repeated section, we create a new button for each 
          country and each button will pass the corresponding country id to the function */}
        </ul>

      </div>
    );
  }
}

// this allows us to use <App /> in index.js
export default App;
